/*
 *  Build file for gradle
 */


plugins {
    id 'com.palantir.git-version' version '3.0.0'
    id 'maven-publish'
    id 'signing'
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'


java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(8))
  }
}

repositories {
    mavenCentral()
    mavenLocal()
}

println "Using java version " + JavaVersion.current()

sourceSets {
    main {    	
        java {
            srcDirs 'src'            
        }
        
        resources {
			srcDirs= ['src']
			exclude '**/*.java'
		}
		
		output.resourcesDir = "$buildDir/classes/java/$name"
    }

    test {
        java {
            srcDirs 'test'
        }
                
        resources {
			srcDirs= ['test']
			exclude '**/*.java'
		}
		
		output.resourcesDir = "$buildDir/classes/java/$name"
    }               
}

// make sure to set the compliance to Java 1.8 in the project properties if the Java version is later than 1.8
// make sure to set Java Compiler > Errors Warnings > Deprecated and Restricted API > Forbidden reference to WARNING instead of ERROR
dependencies {
    implementation 'com.cedarsoftware:json-io:4.13.0'
    implementation 'net.sf.ucanaccess:ucanaccess:5.0.1'
    
    if(JavaVersion.current() != JavaVersion.VERSION_1_8){
 		implementation 'com.sun.xml.bind:jaxb-ri:2.3.5'   
	}
    
    testImplementation "junit:junit:4.13.2"    
}

compileJava {
	project.version= gitVersion() 
	println "Building " + rootProject.name + " " + project.version
	println "Installation directory " + "../externallibraries/" + rootProject.name
}

test {
    // show standard out and standard error of the test JVM(s) on the console
    testLogging.showStandardStreams = true

    // set heap size for the test JVM(s)
    maxHeapSize = "2048m"
    
    exclude '**/ProductionEnvironmentTest.class'
}

task integrationTest(type: Test) {
	description = 'Runs the integration tests (unit tests run using the produced JAR file)'
    group = 'verification'
	dependsOn jar
	
	include '**/*.class'
	
	testLogging.showStandardStreams = true
    testClassesDirs = sourceSets.test.output.classesDirs
        
    // set classpath to test classes + test dependencies + JAR
    classpath = project.sourceSets.test.output + configurations.testRuntimeClasspath + files(jar.archiveFile) 
    outputs.upToDateWhen { false }
    mustRunAfter test
    maxHeapSize = "2048m"
}

check.dependsOn integrationTest
configurations.compileOnly.canBeResolved = true

jar {	
	 manifest {
        attributes("Built-By": "Mathieu Fortin and Jean-Francois Lavoie",
        		   "Specification-Title": "REpicea Tools",
	       		   "Specification-Version": project.version,                   
                   "Specification-Vendor": "CWFC-CCFB",
                   "Implementation-Title": "repicea",
                   "Implementation-Version": project.version,
                   "Implementation-Vendor": "CWFC-CCFB",
                   )
    }
    
	into ('/') {
		from files(['./README.md', './LICENSE.md'])			
	}
	
	// include all java files from main sourceset into the jar file (resources are already included)
	from sourceSets.main.allJava		
}

task deleteInstallFolder(type: Delete) {
  delete "../externallibraries/" + rootProject.name
}

configurations.implementation.canBeResolved=true

task install(type: Copy) {
	description = 'Copies the output jar to installation folder.'
	group = 'build'
	dependsOn deleteInstallFolder,integrationTest
	from configurations.implementation
	from jar
	into "../externallibraries/" + rootProject.name
}

publishing {
    publications {
        repicea(MavenPublication) {
/*        	groupId = "io.github.cwfc-ccfb"
        	artefactId = 'repicea'
        	version = "1.1"
*/          from components.java
/*        	pom {
        		name = 'REpicea Tools'
				group = 'io.github.cwfc-ccfb'
        		description = 'A series of tools to facilite the design of applications, I/O of data, XML serialization and multiprocessing'
        		url = 'https://github.com/CWFC-CCFB/repicea'
        		properties = [
        			packaging: "jar"
	       		]
        		licenses {
        			license {
        				name = 'GNU Lesser General Public License 2.1'
        				url  = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.html'
        			}
        		}
        		developers {
        			developer {
        				id = 'matfortin'
        				name = 'Mathieu Fortin'
        				email = 'mathieu.fortin.re@gmail.com'
        			}        
        			developer {
        				id = 'jflavoie'
        				name = 'Jean-Francois Lavoie'
        				email = 'atmailjfl@gmail.com'
        			}
        		}
        		
        	}	
*/       }
    }

    repositories {
        maven {
            name = 'LocalFile'
            url = "file://${buildDir}/repo"
        }
    }
}


publishRepiceaPublicationToMavenLocal {
	dependsOn integrationTest
}

publishRepiceaPublicationToLocalFileRepository {
	dependsOn integrationTest
}

 